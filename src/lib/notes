# Storing Dates in PostgreSQL with Drizzle

When working with PostgreSQL and Drizzle, the best way to store dates like "25-03-2025" is to use the built-in date data type that Drizzle provides, which maps to PostgreSQL's native DATE type.

## Define Your Table Schema

```typescript
import { pgTable, date, serial } from "drizzle-orm/pg-core";

const events = pgTable('events', {
  id: serial('id').primaryKey(),
  eventDate: date('event_date'), // This will store dates like 2025-03-25
  // other columns...
});
```

## Inserting Dates

When inserting data, you can use JavaScript Date objects:

```typescript
import { db } from './your-db-connection';

// Insert a date
await db.insert(events).values({
  eventDate: new Date('2025-03-25'), // JS format: YYYY-MM-DD
});
```

## Handling Different Date Formats

If you're receiving dates in the format "DD-MM-YYYY" (like "25-03-2025"), you'll need to parse and convert them before storing:

```typescript
function parseDate(dateString: string): Date {
  // Parse from DD-MM-YYYY to a Date object
  const [day, month, year] = dateString.split('-').map(Number);
  return new Date(year, month - 1, day); // Month is 0-indexed in JS
}

// Usage
const userInputDate = '25-03-2025';
await db.insert(events).values({
  eventDate: parseDate(userInputDate),
});
```

## Benefits of Using the Native DATE Type

1. **Proper validation** - PostgreSQL will reject invalid dates
2. **Efficient storage** - Only 4 bytes per date
3. **Date operations** - Enables date arithmetic and functions
4. **Indexing** - More efficient for querying by date ranges

## Querying Dates

```typescript
import { eq, gte, lte, between } from 'drizzle-orm';

// Get events on a specific date
const specificDateEvents = await db.select()
  .from(events)
  .where(eq(events.eventDate, parseDate('25-03-2025')));

// Get events in a date range
const rangeEvents = await db.select()
  .from(events)
  .where(between(
    events.eventDate, 
    parseDate('01-01-2025'), 
    parseDate('31-12-2025')
  ));
```

This approach gives you the best of both worlds: a clean API through Drizzle and the native date handling capabilities of PostgreSQL.